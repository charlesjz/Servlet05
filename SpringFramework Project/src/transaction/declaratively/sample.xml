<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN"
"file:///spring-beans.dtd">
<beans>

	<bean id="customer"
			class="transaction.declaratively.Customer"
			singleton="false">
		<property name="creditLimit">
			<value>300</value>
		</property>
	</bean>
	
	<bean id="customerDaoTarget"
			class="transaction.declaratively.CustomerDaoJdbc">

		<property name="jdbcTemplate">
			<ref bean="jdbcTemplate"/>
		</property>
		<property name="crudStatements">
			<ref bean="crudStatements"/>
		</property>
		<property name="customerNoIncrementer">
			<ref bean="customerNoIncrementer"/>
		</property>

	</bean>
	
	<bean id="accountDaoTarget"
			class="transaction.declaratively.AccountDaoJdbc">

		<property name="jdbcTemplate">
			<ref bean="jdbcTemplate"/>
		</property>
		<property name="crudStatements">
			<ref bean="crudStatements"/>
		</property>
		<property name="depositCRUD">
			<ref bean="depositCRUD"/>
		</property>
		<property name="accountByIdQueryCRUD">
			<ref bean="accountByIdQueryCRUD"/>
		</property>

	</bean>

	<bean id="customerService"
			class="transaction.declaratively.CustomerServiceImpl">
		<property name="creditIncreaseLimit">
			<value>500</value>
		</property>
		<constructor-arg>
			<ref bean="customerDao"/>
		</constructor-arg>
		<constructor-arg>
			<ref bean="accountService"/>
		</constructor-arg>
		
		<property name="locale">
			<value>fr_FR</value>
		</property>

	</bean>
	
	<bean id="accountService"
			class="transaction.declaratively.AccountServiceImpl">

		<constructor-arg>
			<ref bean="accountDao"/>
		</constructor-arg>
		
		<property name="accountTypes">
			<list>
				<value>Saving/CAD</value>
				<value>Checking/CAD</value>
				<value>Saving/USD</value>
				<value>Checking/USD</value>
				<value>Mortgage/CAD</value>
				<value>GIC/CAD</value>
				<value>GIC/USD</value>
				<value>Mutual Funds/CAD</value>
				<value>Mutual Funds/USD</value>
				<value>GIC/EUR</value>
				<value>GIC/AUD</value>
				<value>GIC/HKD</value>
			</list>
		</property>

	</bean>
	
	<bean id="customEditorConfigurer"
			class="org.springframework.beans.factory.config.CustomEditorConfigurer">
		<property name="customEditors">
			<map>
				<entry key="transaction.declaratively.AccountType">
					<bean id="accountTypeEditor"
							class="transaction.declaratively.AccountTypeEditor"/>
				</entry>
			</map>
		</property>
	</bean>
	
	<bean id="messageSource"
			class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basename">
			<value>transaction/declaratively/nctbank</value>
		</property>
	</bean>

	<bean id="appLoggerInterceptor"
			class="transaction.declaratively.ApplicationLoggerInterceptor">
		<constructor-arg index="0">
			<value>c:\\temp\\applog.txt</value>
		</constructor-arg>
	</bean>
	
	<bean id="appLoggerAdvisor"
			class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">
		<property name="advice">
			<ref bean="appLoggerInterceptor"/>
		</property>
		<property name="pattern">
			<value>#.+</value>
		</property>
	</bean>
	
	<bean id="autoProxyCreator"
			class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator">
	</bean>

	<bean id="propertyConfigurer"
			class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>/src/transaction/declaratively/jdbc2.properties</value>
			</list>
		</property>
	</bean>
	
	<bean id="dataSource"
			class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName">
			<value>${database.driver}</value>
		</property>
		<property name="url">
			<value>${database.url}</value>
		</property>
		<property name="username">
			<value>${database.username}</value>
		</property>
		<property name="password">
			<value>${database.password}</value>
		</property>
	</bean>
	
	<bean id="jdbcTemplate"
			class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource">
			<ref bean="dataSource"/>
		</property>
	</bean>
	
	<bean id="crudStatements"
			class="transaction.declaratively.CRUDStatements">
		<property name="insertCustomerSql">
			<value>INSERT INTO SP_CUSTOMER04A ( CUSTOMER_NO, FIRST_NAME, LAST_NAME, PHONE_NUMBER, ADDRESS, EMAIL, CREDIT_LIMIT) VALUES ( ?, ?, ?, ?, ?, ?, ? )</value>
		</property>
		<property name="findCustomerByIdSql">
			<value>SELECT * FROM SP_CUSTOMER04A WHERE CUSTOMER_NO = ?</value>
		</property>
		<property name="insertAccountSql">
			<value>INSERT INTO SP_ACCOUNT04A ( ACCOUNT_ID, CUSTOMER_NO, CURRENCY, TYPE, BALANCE ) VALUES ( ?, ?, ?, ?, ? )</value>
		</property>
		<property name="accountListSql">
			<value>SELECT * FROM SP_ACCOUNT04A WHERE CUSTOMER_NO = ?</value>
		</property>
		<property name="retrieveCustomerNumberSql">
			<value>SELECT COUNT(*) FROM SP_CUSTOMER04A</value>
		</property>
		<property name="findAccountByIdSql">
			<value>SELECT * FROM SP_CUSTOMER04A A, SP_ACCOUNT04A B WHERE A.CUSTOMER_NO = B.CUSTOMER_NO AND ACCOUNT_ID = ?</value>
		</property>
		<property name="depositSql">
			<value>UPDATE SP_ACCOUNT04A SET BALANCE = BALANCE + ? WHERE ACCOUNT_ID = ?</value>
		</property>
		<property name="customerNoIncSql">
			<value>SELECT MAX(CUSTOMER_NO) + 1 FROM SP_CUSTOMER04A</value>
		</property>
	</bean>
	
	<bean id="depositCRUD"
			class="transaction.declaratively.DepositCRUD">
		<constructor-arg>
			<ref bean="dataSource"/>
		</constructor-arg>
		<constructor-arg>
			<value>UPDATE SP_ACCOUNT04A SET BALANCE = BALANCE + ? WHERE ACCOUNT_ID = ?</value>
		</constructor-arg>
	</bean>
	
	<bean id="accountByIdQueryCRUD"
			class="transaction.declaratively.AccountByIdQueryCRUD">
		<constructor-arg>
			<ref bean="dataSource"/>
		</constructor-arg>
		<constructor-arg>
			<value>SELECT * FROM SP_CUSTOMER04A A, SP_ACCOUNT04A B WHERE A.CUSTOMER_NO = B.CUSTOMER_NO AND ACCOUNT_ID = ?</value>
		</constructor-arg>
	</bean>
	
	<bean id="customerNoIncrementer"
			class="transaction.declaratively.MSSqlCustomerNoIncrementer">
		<property name="jdbcTemplate">
			<ref bean="jdbcTemplate"/>
		</property>
		
		<property name="crudStatements">
			<ref bean="crudStatements"/>
		</property>
	</bean>
	
	<bean id="transactionManager"
			class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource">
			<ref bean="dataSource"/>
		</property>
	</bean>

	<bean id="customerTransactionAttribute"
			class="org.springframework.transaction.interceptor.DefaultTransactionAttribute">
		<property name="propagationBehaviorName">
			<value>PROPAGATION_REQUIRED</value>
		</property>
		<property name="isolationLevelName">
			<value>ISOLATION_REPEATABLE_READ</value>
		</property>
	</bean>

	<bean id="customerTransactionAttributeSource"
			class="org.springframework.transaction.interceptor.MatchAlwaysTransactionAttributeSource">

		<property name="transactionAttribute">
			<ref bean="customerTransactionAttribute"/>
		</property>

	</bean>

	<bean id="customerDao"
			class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">

		<property name="proxyInterfaces">
			<list>
				<value>
					transaction.declaratively.CustomerDao
				</value>
			</list>
		</property>
			<property name="target">
				<ref bean="customerDaoTarget"/>
			</property>
		<property name="transactionManager">
			<ref bean="transactionManager"/>
		</property>
		<property name="transactionAttributeSource">
			<ref bean="customerTransactionAttributeSource"/>
		</property>

	</bean>

	<bean id="accountTransactionAttributeSource"
			class="org.springframework.transaction.interceptor.NameMatchTransactionAttributeSource">
		<property name="properties">
			<props>
				<prop key="transfer">
					PROPAGATION_REQUIRES_NEW,ISOLATION_READ_COMMITTED,-transaction.declaratively.InsufficientFundException
				</prop>
				<prop key="deposit">
					PROPAGATION_REQUIRED,ISOLATION_READ_COMMITTED
				</prop>
			</props>
		</property>
	</bean>

	<!-- 
	<bean id="accountTransactionAttribute"
			class="org.springframework.transaction.interceptor.DefaultTransactionAttribute">
		<property name="propagationBehaviorName">
			<value>PROPAGATION_REQUIRED</value>
		</property>
		<property name="isolationLevelName">
			<value>ISOLATION_REPEATABLE_READ</value>
		</property>
	</bean>

	<bean id="accountTransactionAttributeSource"
			class="org.springframework.transaction.interceptor.MatchAlwaysTransactionAttributeSource">

		<property name="transactionAttribute">
			<ref bean="accountTransactionAttribute"/>
		</property>

	</bean>
	 -->

	<bean id="accountDao"
			class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">

		<property name="proxyInterfaces">
			<list>
				<value>
					transaction.declaratively.AccountDao
				</value>
			</list>
		</property>
			<property name="target">
				<ref bean="accountDaoTarget"/>
			</property>
		<property name="transactionManager">
			<ref bean="transactionManager"/>
		</property>
		<property name="transactionAttributeSource">
			<ref bean="accountTransactionAttributeSource"/>
		</property>

	</bean>

</beans>
